{"version":3,"file":"static/js/165.1f9dae60.chunk.js","mappings":"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","sources":["webpack://react-quotes/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-quotes/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-quotes/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-quotes/./src/components/comments/Comments.module.css?d88e","webpack://react-quotes/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js","components/pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <>\n      <figure className={classes.quote}>\n        <p>{props.text}</p>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n    </>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\n\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const { onAddedComment } = props;\n  const { quoteId } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const text = commentTextRef.current.value;\n    sendRequest({ commentData: { text }, quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useEffect, useState, useCallback } from 'react';\nimport CommentsList from '../comments/CommentsList';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { data: loadedComments, status, sendRequest } = useHttp(getAllComments);\n\n  const { quoteId } = props;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddedComment={addedCommentHandler} quoteId={quoteId} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport HighlightedQuote from '../quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { getSingleQuote } from '../../lib/api';\r\nimport Comments from '../comments/Comments';\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const [showComments, setShowComments] = useState(false);\r\n  const { data, status, error, sendRequest } = useHttp(getSingleQuote, true);\r\n\r\n  const { quoteId } = params;\r\n\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered focused'>{error}</p>;\r\n  }\r\n\r\n  if (status === 'completed' && !data.text) {\r\n    return <p>Error page 404</p>;\r\n  }\r\n  return (\r\n    <>\r\n      <HighlightedQuote key={data.id} text={data.text} author={data.author} />\r\n      <button className='btn--flat centered' onClick={() => setShowComments((prev) => !prev)}>\r\n        {showComments ? 'Hide comments' : 'Show comments'}\r\n      </button>\r\n      {showComments && <Comments quoteId={quoteId} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","className","classes","text","author","comments","map","comment","id","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onAddedComment","quoteId","useEffect","submitFormHandler","event","preventDefault","current","value","commentData","onSubmit","LoadingSpinner","htmlFor","rows","ref","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","params","useParams","showComments","setShowComments","getSingleQuote","prev"],"sourceRoot":""}